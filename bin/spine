#!/usr/bin/env node
var argv = process.argv.slice(2),
    fs   = require("fs"),
    fd   = require("path");

var ansi = function(message, color){
  var ANSI_CODES = {
    "off": 0,
    "red": 31,
    "green": 32,
    "yellow": 33
  };
  
  if ( !color ) color = "green";
  
  var str = "";
  str += "\033[" + ANSI_CODES[color] + "m";
  str += message;
  str += "\033[" + ANSI_CODES["off"] + "m";
  return str;
};

var isDir = function(path){
  return(fs.statSync(path).isDirectory());
};

var expandPath = function(path, dir){
  if (fd.basename(path) == path)
    path = dir + path  
  return fd.normalize(path);
};

var camelize = function(str){
  return str.replace(/-|_+(.)?/g, function(match, chr) {
    return chr ? chr.toUpperCase() : '';
  }).replace(/^(.)?/, function(match, chr) {
    return chr ? chr.toUpperCase() : '';
  });
};
    
var Template = function(template, path, values){
  this.template = fd.resolve(template);
  this.path     = fd.resolve(path);
  this.values   = values || {};
};

Template.prototype.__defineGetter__("files", function(){
  if ( !isDir(this.template) )
    return [this.template];
  
    var self = this, 
        files = [];

    (function next(dir) {
      fs.readdirSync(dir).forEach(function(file){
        files.push(file = dir + '/' + file);
        if (isDir(file)) next(file);
      });
    })(this.template);
  return files;
});

Template.prototype.write = function(){
  this.files.forEach(function(path){
    var out = path.replace(this.template, "");
    out = fd.join(this.path, out);
    out = fd.normalize(out);
    
    if ( isDir(path) ) {
      fs.mkdirSync(out, 0775);
      console.log(ansi("\tcreate\t"), out);
    } else if (fd.existsSync(out)) {
      throw(path + " already exists");
    } else {
      var data = this.parse(fs.readFileSync(path, "utf8"));
      fs.writeFileSync(out, data);
      console.log(ansi("\tcreate\t"), out);
    }
  }, this);
};

Template.prototype.parse = function(data){
  var self = this;
  return data.replace(/\{\{([^}]+)\}\}/g, function(_, key){
    return self.values[key];
  });
};

var help = [
    "usage: spine [options] ",
    "",
    "Generates a spine app using the specified command-line options",
    "",
    "options:",
    " app path          Generates a new Spine application",
    " mobile path       Generates a new Spine Mobile application",
    " controller name   Generates a Spine Controller",
    " model name        Generates a Spine Model",
].join('\n');

var generators = {};

generators.app = generators.new = function(){
  var template = __dirname + "/../templates/app";
  var path     = fd.normalize(argv[1]);
  
  // Create parent dir
  if (fd.existsSync(path)) throw(path + " already exists");
  fs.mkdirSync(path, 0775);
  
  (new Template(template, path)).write();
};

generators.mobile = function(){
  var template = __dirname + "/../templates/mobile";
  var path     = fd.normalize(argv[1]);
  
  // Create parent dir
  if (fd.existsSync(path)) throw(path + " already exists");
  fs.mkdirSync(path, 0775);
  
  (new Template(template, path)).write();
};

generators.controller = function(){
  var template = __dirname + "/../templates/controller.coffee";
  var values   = {name: camelize(fd.basename(argv[1]))};
  var path     = expandPath(argv[1], "./app/controllers/") + ".coffee";
  
  (new Template(template, path, values)).write();
};

generators.model = function(){
  var template = __dirname + "/../templates/model.coffee";
  var values   = {name: camelize(fd.basename(argv[1]))};
  var path     = expandPath(argv[1], "./app/models/") + ".coffee";
  
  (new Template(template, path, values)).write();
};

if (generators[argv[0]])
  generators[argv[0]]();
else
  console.log(help);